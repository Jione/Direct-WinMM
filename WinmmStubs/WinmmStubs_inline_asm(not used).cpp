/*
  Generated by AheadLib hijack dll Source Code Generator.

  Referenced code
  AheadLib: https://github.com/strivexjun/AheadLib-x86-x64
  ogg-winmm(Original): https://github.com/hifi-unmaintained/ogg-winmm
  cdaudio-winmm(MP3-Wav): https://github.com/dippy-dipper/cdaudio-winmm
  cdaudio-winmm(CD Player): https://github.com/YELLO-belly/cdaudio-winmm

  Added: Rewrote the original u/hifi's winmm.def linker
  Added: Support for binary patched programs known as "_inmm" (Behavior when changing name winmm.dll to _inmm.dll)
  Added: More added original u/YELLO-belly's function relay for the fake-functions
  Added: Configure standalone execution environment with DLL replication function (Behavior when winmm.win32.dll exists)
  Update: Winmm system function is now linked to the function's original name, such as mciSendcommandA(mciId, uMsg, dwParam1, dwParam2).
*/

#include "GlobalDefinitions.h"

// Environmental Initialization
#undef PlaySound
#define GETADDRESS(s) pfn_ ## s = GetProcAddress(g_OldModule, #s)
#define UPDATEPOINTER(a, b) if (!pfn_ ## a) pfn_ ## a = pfn_ ## b; else if (!pfn_ ## b) pfn_ ## b = pfn_ ## a
#ifndef _AMD64_
#define NAKED_STDCALL(a,b,c,d,...) __declspec(naked) b WINAPI a(__VA_ARGS__) {\
    __asm cmp pfn_ ## a, 0 __asm jz Error __asm jmp pfn_ ## a __asm Error : __asm mov eax, c __asm ret (4 * d)\
}
#else
#define NAKED_STDCALL(a,b,c,d,...)
#endif

BOOL WINAPI NsGetAddress();
static HMODULE g_OldModule = NULL;

// System DLL module load function
BOOL WINAPI LoadSystemModuleW(WCHAR * DLLName) {
    WCHAR tzPath[MAX_PATH]{ 0, };
    WCHAR tzTemp[MAX_PATH]{ 0, };
    HANDLE hFile;
    UINT szText;

    szText = GetSystemDirectoryW(tzPath, MAX_PATH);
    tzPath[szText++] = L'\\';
    tzPath[szText] = 0;
    lstrcatW(tzPath, DLLName);
    lstrcatW(tzPath, L".dll");
    hFile = CreateFileW(tzPath, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);

    if (hFile != INVALID_HANDLE_VALUE) {
        CloseHandle(hFile);
        g_OldModule = LoadLibraryW(tzPath);
    }
    else {
        szText = GetCurrentDirectoryW(MAX_PATH, tzPath);
        tzPath[szText++] = L'\\';
        tzPath[szText] = 0;
        lstrcatW(tzPath, DLLName);
#ifndef _AMD64_
        lstrcatW(tzPath, L".x86.dll");
#else
        lstrcatW(tzPath, L".x64.dll");
#endif
        hFile = CreateFileW(tzPath, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
        if (hFile != INVALID_HANDLE_VALUE) {
            CloseHandle(hFile);
            g_OldModule = LoadLibraryW(tzPath);
        }
    }
    if (g_OldModule) {
        NsGetAddress();
        dprintf(L"Load DLL File (Address:0x%08X): %s", g_OldModule, tzPath);
        return true;
    }
    return false;
}

// Entry point at DLL Load & Release
BOOL APIENTRY DllMain(HMODULE hModule, DWORD dwReason, PVOID pvReserved) {
    if (dwReason == DLL_PROCESS_ATTACH) {
        DisableThreadLibraryCalls(hModule);
        if (!LoadSystemModuleW(L"winmm"))
            MessageBoxA(NULL, "Failed to load system DLL file.", "Alert", MB_OK);
#ifdef _DEBUG
        else
            MessageBoxA(NULL, "Winmm.dll Loaded.", "Alert", MB_OK);
#endif
    }
    else if (dwReason == DLL_PROCESS_DETACH) {
        if (g_OldModule) FreeLibrary(g_OldModule);
#ifdef _DEBUG
        MessageBoxA(NULL, "Winmm.dll Unloaded.", "Alert", MB_OK);
#endif
    }
    return TRUE;
}

// Function Definition Reference Use
#pragma pack(push, 1)
typedef struct _CALLBACK_ARGS {
    DWORD       dwFlags;
    DWORD       dwFunctionAddr;
    WORD        wHandle;
    WORD        wMessage;
    DWORD       dwInstance;
    DWORD       dwParam1;
    DWORD       dwParam2;
} CALLBACK_ARGS;
typedef struct _CALLBACK_DATA {
    WORD            wRecvCount;
    WORD            wSendCount;
    CALLBACK_ARGS   args[16];
    WORD            wIntsCount;
} CALLBACK_DATA;
typedef struct _DEVICEINTERFACELIST {
    LONG Count;
    PWSTR DeviceInterface[1];
} DEVICEINTERFACELIST, * PDEVICEINTERFACELIST;
typedef struct _GFXREMOVEREQUEST {
    DWORD IdToRemove;
    LONG Error;
} GFXREMOVEREQUEST, * PGFXREMOVEREQUEST;
typedef struct _GFXMODIFYREQUEST {
    DWORD IdToModify;
    ULONG NewOrder;
    LONG Error;
} GFXMODIFYREQUEST, * PGFXMODIFYREQUEST;
typedef struct _GFXADDREQUEST {
    PWSTR ZoneFactoryDi;
    PWSTR GfxFactoryDi;
    ULONG Type;
    ULONG Order;
    DWORD NewId;
    LONG Error;
} GFXADDREQUEST, * PGFXADDREQUEST;

typedef CALLBACK_DATA FAR* VPCALLBACK_DATA;         // 16:16 pointer type
typedef CALLBACK_ARGS FAR* VPCALLBACK_ARGS;         // 16:16 pointer type
typedef DWORD(APIENTRY* DRIVERMSGPROC)(DWORD, DWORD, DWORD_PTR, DWORD_PTR, DWORD_PTR);
// task support function prototypes
typedef VOID(FAR PASCAL TASKCALLBACK) (DWORD_PTR dwInst);
typedef TASKCALLBACK FAR* LPTASKCALLBACK;
typedef LONG(CALLBACK* GFXENUMCALLBACK)(PVOID Context, DWORD Id, PCWSTR GfxFactoryDi, REFCLSID rclsid, ULONG Type, ULONG Order);

LRESULT WINAPI DrvClose(HANDLE hDriver, LPARAM lParam1, LPARAM lParam2);
BOOL WINAPI DriverCallback(DWORD_PTR wCallBack, DWORD dwFlags, HDRVR hDrv, DWORD dwMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2);
HANDLE WINAPI DrvOpen(LPCWSTR szDriverName, LPCWSTR szSectionName, LPARAM lParam2);
LRESULT WINAPI DrvSendMessage(HANDLE hDriver, UINT message, LPARAM lParam1, LPARAM lParam2);
BOOL WINAPI WOW32DriverCallback(DWORD dwCallback, DWORD dwFlags, WORD wID, WORD wMsg, DWORD dwUser, DWORD dw1, DWORD dw2);
BOOL WINAPI WOW32ResolveMultiMediaHandle(UINT uHandleType, UINT uMappingDirection, WORD wHandle16_In, LPWORD lpwHandle16_Out, DWORD dwHandle32_In, LPDWORD lpdwHandle32_Out);
DWORD WINAPI NotifyCallbackData(UINT uDevID, UINT uMsg, DWORD dwInstance, DWORD dwParam1, VPCALLBACK_DATA parg16);
void WINAPI WOWAppExit(HANDLE hTask);
UINT WINAPI joySetCalibration(UINT id, PUINT pwXbase, PUINT pwXdelta, PUINT pwYbase, PUINT pwYdelta, PUINT pwZbase, PUINT pwZdelta);
UINT WINAPI mmsystemGetVersion(void);
MMRESULT WINAPI joyConfigChanged(DWORD dwFlags);
BOOL WINAPI mciDriverNotify(HANDLE hCallback, MCIDEVICEID wDeviceID, UINT uStatus);
UINT WINAPI mciDriverYield(MCIDEVICEID wDeviceID);
BOOL WINAPI mciFreeCommandResource(UINT wTable);
DWORD_PTR WINAPI mciGetDriverData(MCIDEVICEID wDeviceID);
UINT WINAPI mciLoadCommandResource(HANDLE hInstance, LPCWSTR lpResName, UINT wType);
BOOL WINAPI mciSetDriverData(MCIDEVICEID wDeviceID, DWORD_PTR dwData);
LPWSTR WINAPI FindCommandItem(MCIDEVICEID wDeviceID, LPCWSTR lpstrType, LPCWSTR lpstrCommand, PUINT  lpwMessage, PUINT lpwTable);
UINT WINAPI mciEatCommandEntry(LPCWSTR  lpEntry, LPDWORD lpValue, PUINT lpID);
UINT WINAPI mciGetParamSize(DWORD dwValue, UINT wID);
BOOL WINAPI mciUnlockCommandTable(UINT wCommandTable);
UINT WINAPI mmDrvInstall(HANDLE hDriver, WCHAR* wszDrvEntry, DRIVERMSGPROC drvMessage, UINT wFlags);
DWORD WINAPI mmGetCurrentTask(void);
void WINAPI mmTaskBlock(DWORD h);
UINT WINAPI mmTaskCreate(LPTASKCALLBACK lpfn, HANDLE* lph, DWORD_PTR dwInst);
BOOL WINAPI mmTaskSignal(DWORD h);
void WINAPI mmTaskYield(void);
DWORD WINAPI aux32Message(UINT uDeviceID, UINT uMessage, DWORD dwInstance, DWORD dwParam1, DWORD dwParam2);
DWORD WINAPI joy32Message(UINT uID, UINT uMessage, DWORD dwInstance, DWORD dwParam1, DWORD dwParam2);
DWORD WINAPI mci32Message(DWORD dwApi, DWORD dwF1, DWORD dwF2, DWORD dwF3, DWORD dwF4);
DWORD WINAPI mid32Message(UINT uDeviceID, UINT uMessage, DWORD dwInstance, DWORD dwParam1, DWORD dwParam2);
DWORD WINAPI mod32Message(UINT uDeviceID, UINT uMessage, DWORD dwInstance, DWORD dwParam1, DWORD dwParam2);
DWORD CALLBACK mxd32Message(UINT uId, UINT uMsg, DWORD dwInstance, DWORD dwParam1, DWORD dwParam2);
DWORD WINAPI tid32Message(UINT uDevId, UINT uMessage, DWORD dwInstance, DWORD dwParam1, DWORD dwParam2);
DWORD WINAPI wid32Message(UINT uDeviceID, UINT uMessage, DWORD dwInstance, DWORD dwParam1, DWORD dwParam2);
DWORD WINAPI wod32Message(UINT uDeviceID, UINT uMessage, DWORD dwInstance, DWORD dwParam1, DWORD dwParam2);
void WINAPI winmmDbgOut(LPSTR lpszFormat, ...);
void WINAPI winmmSetDebugLevel(int level);
void WINAPI MigrateAllDrivers(void);
void WINAPI MigrateSoundEvents(void);
void WINAPI WinmmLogon(BOOL fConsole);
void WINAPI WinmmLogoff(void);
LONG WINAPI gfxCreateZoneFactoriesList(PDEVICEINTERFACELIST* ppDeviceInterfaceList);
LONG WINAPI gfxCreateGfxFactoriesList(PCWSTR ZoneFactoryDi, PDEVICEINTERFACELIST* ppDeviceInterfaceList);
LONG WINAPI gfxDestroyDeviceInterfaceList(PDEVICEINTERFACELIST pDiList);
LONG WINAPI gfxEnumerateGfxs(PCWSTR pstrZoneDeviceInterface, GFXENUMCALLBACK pGfxEnumCallback, PVOID Context);
LONG WINAPI gfxRemoveGfx(DWORD Id);
LONG WINAPI gfxAddGfx(PCWSTR ZoneFactoryDi, PCWSTR GfxFactoryDi, ULONG Type, ULONG Order, PDWORD pNewId);
LONG WINAPI gfxModifyGfx(DWORD Id, ULONG Order);
LONG WINAPI gfxOpenGfx(DWORD dwGfxId, HANDLE* pFileHandle);
LONG WINAPI gfxBatchChange(PGFXREMOVEREQUEST paGfxRemoveRequests, ULONG cGfxRemoveRequests, PGFXMODIFYREQUEST paGfxModifyRequests, ULONG cGfxModifyRequests, PGFXADDREQUEST paGfxAddRequests, ULONG cGfxAddRequests);

#ifdef _AMD64_
extern "C" {
#endif
// PlaySound Functions
PVOID pfn_NT4PlaySound;
PVOID pfn_PlaySound;
PVOID pfn_sndPlaySoundA;
PVOID pfn_sndPlaySoundW;
PVOID pfn_PlaySoundA;
PVOID pfn_PlaySoundW;

// Driver and Drv help Functions
PVOID pfn_CloseDriver;
PVOID pfn_DefDriverProc;
PVOID pfn_DriverCallback;
PVOID pfn_DrvClose;
PVOID pfn_DrvGetModuleHandle;
PVOID pfn_DrvOpen;
PVOID pfn_DrvSendMessage;
PVOID pfn_GetDriverModuleHandle;
PVOID pfn_MigrateSoundEvents;
PVOID pfn_MigrateAllDrivers;
PVOID pfn_mmsystemGetVersion;
PVOID pfn_NotifyCallbackData;
PVOID pfn_OpenDriver;
PVOID pfn_SendDriverMessage;
PVOID pfn_WOW32DriverCallback;
PVOID pfn_WOW32ResolveMultiMediaHandle;
PVOID pfn_WOWAppExit;
PVOID pfn_winmmDbgOut;
PVOID pfn_WinmmLogon;
PVOID pfn_WinmmLogoff;
PVOID pfn_winmmSetDebugLevel;

// Audio GFX support Functions
PVOID pfn_gfxCreateZoneFactoriesList;
PVOID pfn_gfxCreateGfxFactoriesList;
PVOID pfn_gfxDestroyDeviceInterfaceList;
PVOID pfn_gfxEnumerateGfxs;
PVOID pfn_gfxRemoveGfx;
PVOID pfn_gfxAddGfx;
PVOID pfn_gfxModifyGfx;
PVOID pfn_gfxOpenGfx;
PVOID pfn_gfxBatchChange;

// AUX Functions
PVOID pfn_auxGetDevCapsA;
PVOID pfn_auxGetDevCapsW;
PVOID pfn_auxGetNumDevs;
PVOID pfn_auxGetVolume;
PVOID pfn_auxOutMessage;
PVOID pfn_auxSetVolume;

// Joystick Functions
PVOID pfn_joyConfigChanged;
PVOID pfn_joySetCalibration;
PVOID pfn_joyGetDevCapsA;
PVOID pfn_joyGetDevCapsW;
PVOID pfn_joyGetNumDevs;
PVOID pfn_joyGetPos;
PVOID pfn_joyGetPosEx;
PVOID pfn_joyGetThreshold;
PVOID pfn_joyReleaseCapture;
PVOID pfn_joySetCapture;
PVOID pfn_joySetThreshold;

// MCI Functions
PVOID pfn_mciExecute;
PVOID pfn_mciDriverNotify;
PVOID pfn_mciDriverYield;
PVOID pfn_mciFreeCommandResource;
PVOID pfn_mciGetCreatorTask;
PVOID pfn_mciGetDeviceIDA;
PVOID pfn_mciGetDeviceIDFromElementIDA;
PVOID pfn_mciGetDeviceIDFromElementIDW;
PVOID pfn_mciGetDeviceIDW;
PVOID pfn_mciGetDriverData;
PVOID pfn_mciGetErrorStringA;
PVOID pfn_mciGetErrorStringW;
PVOID pfn_mciGetYieldProc;
PVOID pfn_mciLoadCommandResource;
PVOID pfn_mciSendCommandA;
PVOID pfn_mciSendCommandW;
PVOID pfn_mciSendStringA;
PVOID pfn_mciSendStringW;
PVOID pfn_mciSetDriverData;
PVOID pfn_mciSetYieldProc;
PVOID pfn_mciEatCommandEntry;
PVOID pfn_mciGetParamSize;
PVOID pfn_mciUnlockCommandTable;
PVOID pfn_FindCommandItem;

// MIDI Functions
PVOID pfn_midiConnect;
PVOID pfn_midiDisconnect;
PVOID pfn_midiInAddBuffer;
PVOID pfn_midiInClose;
PVOID pfn_midiInGetDevCapsA;
PVOID pfn_midiInGetDevCapsW;
PVOID pfn_midiInGetErrorTextA;
PVOID pfn_midiInGetErrorTextW;
PVOID pfn_midiInGetID;
PVOID pfn_midiInGetNumDevs;
PVOID pfn_midiInMessage;
PVOID pfn_midiInOpen;
PVOID pfn_midiInPrepareHeader;
PVOID pfn_midiInReset;
PVOID pfn_midiInStart;
PVOID pfn_midiInStop;
PVOID pfn_midiInUnprepareHeader;
PVOID pfn_midiOutCacheDrumPatches;
PVOID pfn_midiOutCachePatches;
PVOID pfn_midiOutClose;
PVOID pfn_midiOutGetDevCapsA;
PVOID pfn_midiOutGetDevCapsW;
PVOID pfn_midiOutGetErrorTextA;
PVOID pfn_midiOutGetErrorTextW;
PVOID pfn_midiOutGetID;
PVOID pfn_midiOutGetNumDevs;
PVOID pfn_midiOutGetVolume;
PVOID pfn_midiOutLongMsg;
PVOID pfn_midiOutMessage;
PVOID pfn_midiOutOpen;
PVOID pfn_midiOutPrepareHeader;
PVOID pfn_midiOutReset;
PVOID pfn_midiOutSetVolume;
PVOID pfn_midiOutShortMsg;
PVOID pfn_midiOutUnprepareHeader;
PVOID pfn_midiStreamClose;
PVOID pfn_midiStreamOpen;
PVOID pfn_midiStreamOut;
PVOID pfn_midiStreamPause;
PVOID pfn_midiStreamPosition;
PVOID pfn_midiStreamProperty;
PVOID pfn_midiStreamRestart;
PVOID pfn_midiStreamStop;

// Mixer Functions
PVOID pfn_mixerClose;
PVOID pfn_mixerGetControlDetailsA;
PVOID pfn_mixerGetControlDetailsW;
PVOID pfn_mixerGetDevCapsA;
PVOID pfn_mixerGetDevCapsW;
PVOID pfn_mixerGetID;
PVOID pfn_mixerGetLineControlsA;
PVOID pfn_mixerGetLineControlsW;
PVOID pfn_mixerGetLineInfoA;
PVOID pfn_mixerGetLineInfoW;
PVOID pfn_mixerGetNumDevs;
PVOID pfn_mixerMessage;
PVOID pfn_mixerOpen;
PVOID pfn_mixerSetControlDetails;

// Task Functions
PVOID pfn_mmDrvInstall;
PVOID pfn_mmGetCurrentTask;
PVOID pfn_mmTaskBlock;
PVOID pfn_mmTaskCreate;
PVOID pfn_mmTaskSignal;
PVOID pfn_mmTaskYield;

// Multimedia io Functions
PVOID pfn_mmioAdvance;
PVOID pfn_mmioAscend;
PVOID pfn_mmioClose;
PVOID pfn_mmioCreateChunk;
PVOID pfn_mmioDescend;
PVOID pfn_mmioFlush;
PVOID pfn_mmioGetInfo;
PVOID pfn_mmioInstallIOProcA;
PVOID pfn_mmioInstallIOProcW;
PVOID pfn_mmioOpenA;
PVOID pfn_mmioOpenW;
PVOID pfn_mmioRead;
PVOID pfn_mmioRenameA;
PVOID pfn_mmioRenameW;
PVOID pfn_mmioSeek;
PVOID pfn_mmioSendMessage;
PVOID pfn_mmioSetBuffer;
PVOID pfn_mmioSetInfo;
PVOID pfn_mmioStringToFOURCCA;
PVOID pfn_mmioStringToFOURCCW;
PVOID pfn_mmioWrite;

// Time Functions
PVOID pfn_timeBeginPeriod;
PVOID pfn_timeEndPeriod;
PVOID pfn_timeGetDevCaps;
PVOID pfn_timeGetSystemTime;
PVOID pfn_timeGetTime;
PVOID pfn_timeKillEvent;
PVOID pfn_timeSetEvent;

// Wave Functions
PVOID pfn_waveInAddBuffer;
PVOID pfn_waveInClose;
PVOID pfn_waveInGetDevCapsA;
PVOID pfn_waveInGetDevCapsW;
PVOID pfn_waveInGetErrorTextA;
PVOID pfn_waveInGetErrorTextW;
PVOID pfn_waveInGetID;
PVOID pfn_waveInGetNumDevs;
PVOID pfn_waveInGetPosition;
PVOID pfn_waveInMessage;
PVOID pfn_waveInOpen;
PVOID pfn_waveInPrepareHeader;
PVOID pfn_waveInReset;
PVOID pfn_waveInStart;
PVOID pfn_waveInStop;
PVOID pfn_waveInUnprepareHeader;
PVOID pfn_waveOutBreakLoop;
PVOID pfn_waveOutClose;
PVOID pfn_waveOutGetDevCapsA;
PVOID pfn_waveOutGetDevCapsW;
PVOID pfn_waveOutGetErrorTextA;
PVOID pfn_waveOutGetErrorTextW;
PVOID pfn_waveOutGetID;
PVOID pfn_waveOutGetNumDevs;
PVOID pfn_waveOutGetPitch;
PVOID pfn_waveOutGetPlaybackRate;
PVOID pfn_waveOutGetPosition;
PVOID pfn_waveOutGetVolume;
PVOID pfn_waveOutMessage;
PVOID pfn_waveOutOpen;
PVOID pfn_waveOutPause;
PVOID pfn_waveOutPrepareHeader;
PVOID pfn_waveOutReset;
PVOID pfn_waveOutRestart;
PVOID pfn_waveOutSetPitch;
PVOID pfn_waveOutSetPlaybackRate;
PVOID pfn_waveOutSetVolume;
PVOID pfn_waveOutUnprepareHeader;
PVOID pfn_waveOutWrite;

// Message Functions
PVOID pfn_aux32Message;
PVOID pfn_mid32Message;
PVOID pfn_joy32Message;
PVOID pfn_mci32Message;
PVOID pfn_mod32Message;
PVOID pfn_mxd32Message;
PVOID pfn_tid32Message;
PVOID pfn_wid32Message;
PVOID pfn_wod32Message;
#ifdef _AMD64_
}
#endif

// PlaySound Functions
NAKED_STDCALL(NT4PlaySound, BOOL, 0, 2, LPCWSTR, UINT);
NAKED_STDCALL(PlaySound, BOOL, 0, 2, LPCSTR, UINT);
NAKED_STDCALL(sndPlaySoundA, BOOL, 0, 2, LPCSTR, UINT);
NAKED_STDCALL(sndPlaySoundW, BOOL, 0, 2, LPCWSTR, UINT);
NAKED_STDCALL(PlaySoundA, BOOL, 0, 3, LPCSTR, HMODULE, DWORD);
NAKED_STDCALL(PlaySoundW, BOOL, 0, 3, LPCWSTR, HMODULE, DWORD);

// Driver and Drv help Functions
NAKED_STDCALL(CloseDriver, LRESULT, -1, 3, HDRVR, LPARAM, LPARAM);
NAKED_STDCALL(OpenDriver, HDRVR, NULL, 3, LPCWSTR, LPCWSTR, LPARAM);
NAKED_STDCALL(SendDriverMessage, LRESULT, -1, 4, HDRVR, UINT, LPARAM, LPARAM);
NAKED_STDCALL(DrvGetModuleHandle, HMODULE, NULL, 1, HDRVR);
NAKED_STDCALL(GetDriverModuleHandle, HMODULE, NULL, 1, HDRVR);
NAKED_STDCALL(DefDriverProc, LRESULT, -1, 5, DWORD_PTR, HDRVR, UINT, LPARAM, LPARAM);
NAKED_STDCALL(DrvClose, LRESULT, -1, 3, HANDLE, LPARAM, LPARAM);
NAKED_STDCALL(DriverCallback, BOOL, 0, 7, DWORD_PTR, DWORD, HDRVR, DWORD, DWORD_PTR, DWORD_PTR, DWORD_PTR);
NAKED_STDCALL(DrvOpen, HANDLE, 0, 3, LPCWSTR, LPCWSTR, LPARAM);
NAKED_STDCALL(DrvSendMessage, LRESULT, -1, 4, HANDLE, UINT, LPARAM, LPARAM);
NAKED_STDCALL(mmsystemGetVersion, UINT, 0, 0, void);
NAKED_STDCALL(NotifyCallbackData, DWORD, 0, 5, UINT, UINT, DWORD, DWORD, VPCALLBACK_DATA);
NAKED_STDCALL(winmmDbgOut, void, 0, 0, LPSTR, ...);
NAKED_STDCALL(winmmSetDebugLevel, void, 0, 1, int);
NAKED_STDCALL(MigrateAllDrivers, void, 0, 0, void);
NAKED_STDCALL(MigrateSoundEvents, void, 0, 0, void);
NAKED_STDCALL(WinmmLogon, void, 0, 1, BOOL);
NAKED_STDCALL(WinmmLogoff, void, 0, 0, void);
NAKED_STDCALL(WOW32DriverCallback, BOOL, 0, 7, DWORD, DWORD, WORD, WORD, DWORD, DWORD, DWORD);
NAKED_STDCALL(WOW32ResolveMultiMediaHandle, BOOL, 0, 6, UINT, UINT, WORD, LPWORD, DWORD, LPDWORD);
NAKED_STDCALL(WOWAppExit, void, 0, 1, HANDLE);

// Audio GFX support Functions
NAKED_STDCALL(gfxCreateZoneFactoriesList, LONG, 0, 1, PDEVICEINTERFACELIST*);
NAKED_STDCALL(gfxCreateGfxFactoriesList, LONG, 0, 2, PCWSTR, PDEVICEINTERFACELIST*);
NAKED_STDCALL(gfxDestroyDeviceInterfaceList, LONG, 0, 1, PDEVICEINTERFACELIST);
NAKED_STDCALL(gfxEnumerateGfxs, LONG, 0, 3, PCWSTR, GFXENUMCALLBACK, PVOID);
NAKED_STDCALL(gfxRemoveGfx, LONG, 0, 1, DWORD);
NAKED_STDCALL(gfxAddGfx, LONG, 0, 5, PCWSTR, PCWSTR, ULONG, ULONG, PDWORD);
NAKED_STDCALL(gfxModifyGfx, LONG, 0, 2, DWORD, ULONG);
NAKED_STDCALL(gfxOpenGfx, LONG, 0, 2, DWORD, HANDLE*);
NAKED_STDCALL(gfxBatchChange, LONG, 0, 6, PGFXREMOVEREQUEST, ULONG, PGFXMODIFYREQUEST, ULONG, PGFXADDREQUEST, ULONG);

// AUX Functions
NAKED_STDCALL(auxGetDevCapsA, MMRESULT, MMSYSERR_ERROR, 3, UINT_PTR, LPAUXCAPSA, UINT);
NAKED_STDCALL(auxGetDevCapsW, MMRESULT, MMSYSERR_ERROR, 3, UINT_PTR, LPAUXCAPSW, UINT);
NAKED_STDCALL(auxGetNumDevs, UINT, 0, 0, void);
NAKED_STDCALL(auxGetVolume, MMRESULT, MMSYSERR_ERROR, 2, UINT, LPDWORD);
NAKED_STDCALL(auxOutMessage, MMRESULT, MMSYSERR_ERROR, 4, UINT, UINT, DWORD_PTR, DWORD_PTR);
NAKED_STDCALL(auxSetVolume, MMRESULT, MMSYSERR_ERROR, 2, UINT, DWORD);

// Joystick Functions
NAKED_STDCALL(joyGetNumDevs, UINT, 0, 0, void);
NAKED_STDCALL(joyGetDevCapsA, MMRESULT, MMSYSERR_ERROR, 3, UINT_PTR, LPJOYCAPSA, UINT);
NAKED_STDCALL(joyGetDevCapsW, MMRESULT, MMSYSERR_ERROR, 3, UINT_PTR, LPJOYCAPSW, UINT);
NAKED_STDCALL(joyGetPos, MMRESULT, MMSYSERR_ERROR, 2, UINT, LPJOYINFO);
NAKED_STDCALL(joyGetPosEx, MMRESULT, MMSYSERR_ERROR, 2, UINT, LPJOYINFOEX);
NAKED_STDCALL(joyGetThreshold, MMRESULT, MMSYSERR_ERROR, 2, UINT, LPUINT);
NAKED_STDCALL(joyReleaseCapture, MMRESULT, MMSYSERR_ERROR, 1, UINT);
NAKED_STDCALL(joySetCapture, MMRESULT, MMSYSERR_ERROR, 4, HWND, UINT, UINT, BOOL);
NAKED_STDCALL(joySetThreshold, MMRESULT, MMSYSERR_ERROR, 2, UINT, UINT);
NAKED_STDCALL(joySetCalibration, UINT, -1, 7, UINT, PUINT, PUINT, PUINT, PUINT, PUINT, PUINT);
NAKED_STDCALL(joyConfigChanged, MMRESULT, MMSYSERR_ERROR, 1, DWORD);

// MCI Functions
NAKED_STDCALL(mciExecute, BOOL, 0, 1, LPCSTR);
NAKED_STDCALL(mciSendCommandA, MCIERROR, MMSYSERR_ERROR, 4, MCIDEVICEID, UINT, DWORD_PTR, DWORD_PTR);
NAKED_STDCALL(mciSendCommandW, MCIERROR, MMSYSERR_ERROR, 4, MCIDEVICEID, UINT, DWORD_PTR, DWORD_PTR);
NAKED_STDCALL(mciSendStringA, MCIERROR, MMSYSERR_ERROR, 4, LPCSTR, LPSTR, UINT, HWND);
NAKED_STDCALL(mciSendStringW, MCIERROR, MMSYSERR_ERROR, 4, LPCWSTR, LPWSTR, UINT, HWND);
NAKED_STDCALL(mciGetDeviceIDA, MCIDEVICEID, 0, 1, LPCSTR);
NAKED_STDCALL(mciGetDeviceIDW, MCIDEVICEID, 0, 1, LPCWSTR);
NAKED_STDCALL(mciGetDeviceIDFromElementIDA, MCIDEVICEID, 0, 2, DWORD, LPCSTR);
NAKED_STDCALL(mciGetDeviceIDFromElementIDW, MCIDEVICEID, 0, 2, DWORD, LPCWSTR);
NAKED_STDCALL(mciGetErrorStringA, BOOL, 0, 3, MCIERROR, LPSTR, UINT);
NAKED_STDCALL(mciGetErrorStringW, BOOL, 0, 3, MCIERROR, LPWSTR, UINT);
NAKED_STDCALL(mciSetYieldProc, BOOL, 0, 3, MCIDEVICEID, YIELDPROC, DWORD);
NAKED_STDCALL(mciGetCreatorTask, HTASK, NULL, 1, MCIDEVICEID);
NAKED_STDCALL(mciGetYieldProc, YIELDPROC, NULL, 2, MCIDEVICEID, LPDWORD);
NAKED_STDCALL(mciDriverNotify, BOOL, 0, 3, HANDLE, MCIDEVICEID, UINT);
NAKED_STDCALL(mciDriverYield, UINT, 0, 1, MCIDEVICEID);
NAKED_STDCALL(mciFreeCommandResource, BOOL, 0, 1, UINT);
NAKED_STDCALL(mciGetDriverData, DWORD_PTR, 0, 1, MCIDEVICEID);
NAKED_STDCALL(mciLoadCommandResource, UINT, 0, 3, HANDLE, LPCWSTR, UINT);
NAKED_STDCALL(mciSetDriverData, BOOL, 0, 2, MCIDEVICEID, DWORD_PTR);
NAKED_STDCALL(mciEatCommandEntry, UINT, 0, 3, LPCWSTR, LPDWORD, PUINT);
NAKED_STDCALL(mciGetParamSize, UINT, 0, 2, DWORD, UINT);
NAKED_STDCALL(mciUnlockCommandTable, BOOL, 0, 1, UINT);
NAKED_STDCALL(FindCommandItem, LPWSTR, 0, 5, MCIDEVICEID, LPCWSTR, LPCWSTR, PUINT, PUINT);

// MIDI Functions
NAKED_STDCALL(midiOutGetNumDevs, UINT, 0, 0, void);
NAKED_STDCALL(midiStreamOpen, MMRESULT, MMSYSERR_ERROR, 6, LPHMIDISTRM, LPUINT, DWORD, DWORD_PTR, DWORD_PTR, DWORD);
NAKED_STDCALL(midiStreamClose, MMRESULT, MMSYSERR_ERROR, 1, HMIDISTRM);
NAKED_STDCALL(midiStreamProperty, MMRESULT, MMSYSERR_ERROR, 3, HMIDISTRM, LPBYTE, DWORD);
NAKED_STDCALL(midiStreamPosition, MMRESULT, MMSYSERR_ERROR, 3, HMIDISTRM, LPMMTIME, UINT);
NAKED_STDCALL(midiStreamOut, MMRESULT, MMSYSERR_ERROR, 3, HMIDISTRM, LPMIDIHDR, UINT);
NAKED_STDCALL(midiStreamPause, MMRESULT, MMSYSERR_ERROR, 1, HMIDISTRM);
NAKED_STDCALL(midiStreamRestart, MMRESULT, MMSYSERR_ERROR, 1, HMIDISTRM);
NAKED_STDCALL(midiStreamStop, MMRESULT, MMSYSERR_ERROR, 1, HMIDISTRM);
NAKED_STDCALL(midiConnect, MMRESULT, MMSYSERR_ERROR, 3, HMIDI, HMIDIOUT, LPVOID);
NAKED_STDCALL(midiDisconnect, MMRESULT, MMSYSERR_ERROR, 3, HMIDI, HMIDIOUT, LPVOID);
NAKED_STDCALL(midiOutGetDevCapsA, MMRESULT, MMSYSERR_ERROR, 3, UINT_PTR, LPMIDIOUTCAPSA, UINT);
NAKED_STDCALL(midiOutGetDevCapsW, MMRESULT, MMSYSERR_ERROR, 3, UINT_PTR, LPMIDIOUTCAPSW, UINT);
NAKED_STDCALL(midiOutGetVolume, MMRESULT, MMSYSERR_ERROR, 2, HMIDIOUT, LPDWORD);
NAKED_STDCALL(midiOutSetVolume, MMRESULT, MMSYSERR_ERROR, 2, HMIDIOUT, DWORD);
NAKED_STDCALL(midiOutGetErrorTextA, MMRESULT, MMSYSERR_ERROR, 3, MMRESULT, LPSTR, UINT);
NAKED_STDCALL(midiOutGetErrorTextW, MMRESULT, MMSYSERR_ERROR, 3, MMRESULT, LPWSTR, UINT);
NAKED_STDCALL(midiOutOpen, MMRESULT, MMSYSERR_ERROR, 5, LPHMIDIOUT, UINT, DWORD_PTR, DWORD_PTR, DWORD);
NAKED_STDCALL(midiOutClose, MMRESULT, MMSYSERR_ERROR, 1, HMIDIOUT);
NAKED_STDCALL(midiOutPrepareHeader, MMRESULT, MMSYSERR_ERROR, 3, HMIDIOUT, LPMIDIHDR, UINT);
NAKED_STDCALL(midiOutUnprepareHeader, MMRESULT, MMSYSERR_ERROR, 3, HMIDIOUT, LPMIDIHDR, UINT);
NAKED_STDCALL(midiOutShortMsg, MMRESULT, MMSYSERR_ERROR, 2, HMIDIOUT, DWORD);
NAKED_STDCALL(midiOutLongMsg, MMRESULT, MMSYSERR_ERROR, 3, HMIDIOUT, LPMIDIHDR, UINT);
NAKED_STDCALL(midiOutReset, MMRESULT, MMSYSERR_ERROR, 1, HMIDIOUT);
NAKED_STDCALL(midiOutCachePatches, MMRESULT, MMSYSERR_ERROR, 4, HMIDIOUT, UINT, LPWORD, UINT);
NAKED_STDCALL(midiOutCacheDrumPatches, MMRESULT, MMSYSERR_ERROR, 4, HMIDIOUT, UINT, LPWORD, UINT);
NAKED_STDCALL(midiOutGetID, MMRESULT, MMSYSERR_ERROR, 2, HMIDIOUT, LPUINT);
NAKED_STDCALL(midiOutMessage, MMRESULT, MMSYSERR_ERROR, 4, HMIDIOUT, UINT, DWORD_PTR, DWORD_PTR);
NAKED_STDCALL(midiInGetNumDevs, UINT, 0, 0, void);
NAKED_STDCALL(midiInGetDevCapsA, MMRESULT, MMSYSERR_ERROR, 3, UINT_PTR, LPMIDIINCAPSA, UINT);
NAKED_STDCALL(midiInGetDevCapsW, MMRESULT, MMSYSERR_ERROR, 3, UINT_PTR, LPMIDIINCAPSW, UINT);
NAKED_STDCALL(midiInGetErrorTextA, MMRESULT, MMSYSERR_ERROR, 3, MMRESULT, LPSTR, UINT);
NAKED_STDCALL(midiInGetErrorTextW, MMRESULT, MMSYSERR_ERROR, 3, MMRESULT, LPWSTR, UINT);
NAKED_STDCALL(midiInOpen, MMRESULT, MMSYSERR_ERROR, 5, LPHMIDIIN, UINT, DWORD_PTR, DWORD_PTR, DWORD);
NAKED_STDCALL(midiInClose, MMRESULT, MMSYSERR_ERROR, 1, HMIDIIN);
NAKED_STDCALL(midiInPrepareHeader, MMRESULT, MMSYSERR_ERROR, 3, HMIDIIN, LPMIDIHDR, UINT);
NAKED_STDCALL(midiInUnprepareHeader, MMRESULT, MMSYSERR_ERROR, 3, HMIDIIN, LPMIDIHDR, UINT);
NAKED_STDCALL(midiInAddBuffer, MMRESULT, MMSYSERR_ERROR, 3, HMIDIIN, LPMIDIHDR, UINT);
NAKED_STDCALL(midiInStart, MMRESULT, MMSYSERR_ERROR, 1, HMIDIIN);
NAKED_STDCALL(midiInStop, MMRESULT, MMSYSERR_ERROR, 1, HMIDIIN);
NAKED_STDCALL(midiInReset, MMRESULT, MMSYSERR_ERROR, 1, HMIDIIN);
NAKED_STDCALL(midiInGetID, MMRESULT, MMSYSERR_ERROR, 2, HMIDIIN, LPUINT);
NAKED_STDCALL(midiInMessage, MMRESULT, MMSYSERR_ERROR, 4, HMIDIIN, UINT, DWORD_PTR, DWORD_PTR);

// Mixer Functions
NAKED_STDCALL(mixerGetNumDevs, UINT, 0, 0, void);
NAKED_STDCALL(mixerGetDevCapsA, MMRESULT, MMSYSERR_ERROR, 3, UINT_PTR, LPMIXERCAPSA, UINT);
NAKED_STDCALL(mixerGetDevCapsW, MMRESULT, MMSYSERR_ERROR, 3, UINT_PTR, LPMIXERCAPSW, UINT);
NAKED_STDCALL(mixerOpen, MMRESULT, MMSYSERR_ERROR, 5, LPHMIXER, UINT, DWORD_PTR, DWORD_PTR, DWORD);
NAKED_STDCALL(mixerClose, MMRESULT, MMSYSERR_ERROR, 1, HMIXER);
NAKED_STDCALL(mixerMessage, DWORD, MMSYSERR_ERROR, 4, HMIXER, UINT, DWORD_PTR, DWORD_PTR);
NAKED_STDCALL(mixerGetLineInfoA, MMRESULT, MMSYSERR_ERROR, 3, HMIXEROBJ, LPMIXERLINEA, DWORD);
NAKED_STDCALL(mixerGetLineInfoW, MMRESULT, MMSYSERR_ERROR, 3, HMIXEROBJ, LPMIXERLINEW, DWORD);
NAKED_STDCALL(mixerGetID, MMRESULT, MMSYSERR_ERROR, 3, HMIXEROBJ, UINT far*, DWORD);
NAKED_STDCALL(mixerGetLineControlsA, MMRESULT, MMSYSERR_ERROR, 3, HMIXEROBJ, LPMIXERLINECONTROLSA, DWORD);
NAKED_STDCALL(mixerGetLineControlsW, MMRESULT, MMSYSERR_ERROR, 3, HMIXEROBJ, LPMIXERLINECONTROLSW, DWORD);
NAKED_STDCALL(mixerGetControlDetailsA, MMRESULT, MMSYSERR_ERROR, 3, HMIXEROBJ, LPMIXERCONTROLDETAILS, DWORD);
NAKED_STDCALL(mixerGetControlDetailsW, MMRESULT, MMSYSERR_ERROR, 3, HMIXEROBJ, LPMIXERCONTROLDETAILS, DWORD);
NAKED_STDCALL(mixerSetControlDetails, MMRESULT, MMSYSERR_ERROR, 3, HMIXEROBJ, LPMIXERCONTROLDETAILS, DWORD);

// Task Functions
NAKED_STDCALL(mmDrvInstall, UINT, 0, 4, HANDLE, WCHAR*, DRIVERMSGPROC, UINT);
NAKED_STDCALL(mmGetCurrentTask, DWORD, 0, 0, void);
NAKED_STDCALL(mmTaskBlock, void, 0, 1, DWORD);
NAKED_STDCALL(mmTaskCreate, UINT, 0, 3, LPTASKCALLBACK, HANDLE*, DWORD_PTR);
NAKED_STDCALL(mmTaskSignal, BOOL, 0, 1, DWORD);
NAKED_STDCALL(mmTaskYield, void, 0, 0, void);

// Multimedia io Functions
NAKED_STDCALL(mmioStringToFOURCCA, FOURCC, 0, 2, LPCSTR, UINT);
NAKED_STDCALL(mmioStringToFOURCCW, FOURCC, 0, 2, LPCWSTR, UINT);
NAKED_STDCALL(mmioInstallIOProcA, LPMMIOPROC, NULL, 3, FOURCC, LPMMIOPROC, DWORD);
NAKED_STDCALL(mmioInstallIOProcW, LPMMIOPROC, NULL, 3, FOURCC, LPMMIOPROC, DWORD);
NAKED_STDCALL(mmioOpenA, HMMIO, MMSYSERR_ERROR, 3, LPSTR, LPMMIOINFO, DWORD);
NAKED_STDCALL(mmioOpenW, HMMIO, MMSYSERR_ERROR, 3, LPWSTR, LPMMIOINFO, DWORD);
NAKED_STDCALL(mmioRenameA, MMRESULT, MMSYSERR_ERROR, 4, LPCSTR, LPCSTR, LPCMMIOINFO, DWORD);
NAKED_STDCALL(mmioRenameW, MMRESULT, MMSYSERR_ERROR, 4, LPCWSTR, LPCWSTR, LPCMMIOINFO, DWORD);
NAKED_STDCALL(mmioClose, MMRESULT, MMSYSERR_ERROR, 2, HMMIO, UINT);
NAKED_STDCALL(mmioRead, LONG, -1, 3, HMMIO, HPSTR, LONG);
NAKED_STDCALL(mmioWrite, LONG, -1, 3, HMMIO, const char*, LONG);
NAKED_STDCALL(mmioSeek, LONG, -1, 3, HMMIO, LONG, int);
NAKED_STDCALL(mmioGetInfo, MMRESULT, MMSYSERR_ERROR, 3, HMMIO, LPMMIOINFO, UINT);
NAKED_STDCALL(mmioSetInfo, MMRESULT, MMSYSERR_ERROR, 3, HMMIO, LPCMMIOINFO, UINT);
NAKED_STDCALL(mmioSetBuffer, MMRESULT, MMSYSERR_ERROR, 4, HMMIO, LPSTR, LONG, UINT);
NAKED_STDCALL(mmioFlush, MMRESULT, MMSYSERR_ERROR, 2, HMMIO, UINT);
NAKED_STDCALL(mmioAdvance, MMRESULT, MMSYSERR_ERROR, 3, HMMIO, LPMMIOINFO, UINT);
NAKED_STDCALL(mmioSendMessage, LRESULT, -1, 4, HMMIO, UINT, LPARAM, LPARAM);
NAKED_STDCALL(mmioDescend, MMRESULT, MMSYSERR_ERROR, 4, HMMIO, LPMMCKINFO, const MMCKINFO far*, UINT);
NAKED_STDCALL(mmioAscend, MMRESULT, MMSYSERR_ERROR, 3, HMMIO, LPMMCKINFO, UINT);
NAKED_STDCALL(mmioCreateChunk, MMRESULT, MMSYSERR_ERROR, 3, HMMIO, LPMMCKINFO, UINT);

// Time Functions
NAKED_STDCALL(timeGetSystemTime, MMRESULT, MMSYSERR_ERROR, 2, LPMMTIME, UINT);
NAKED_STDCALL(timeGetTime, DWORD, 0, 0, void);
NAKED_STDCALL(timeSetEvent, MMRESULT, MMSYSERR_ERROR, 5, UINT, UINT, LPTIMECALLBACK, DWORD_PTR, UINT);
NAKED_STDCALL(timeKillEvent, MMRESULT, MMSYSERR_ERROR, 1, UINT);
NAKED_STDCALL(timeGetDevCaps, MMRESULT, MMSYSERR_ERROR, 2, LPTIMECAPS, UINT);
NAKED_STDCALL(timeBeginPeriod, MMRESULT, MMSYSERR_ERROR, 1, UINT);
NAKED_STDCALL(timeEndPeriod, MMRESULT, MMSYSERR_ERROR, 1, UINT);

// Wave Functions
NAKED_STDCALL(waveOutGetNumDevs, UINT, 0, 0, void);
NAKED_STDCALL(waveOutGetDevCapsA, MMRESULT, MMSYSERR_ERROR, 3, UINT_PTR, LPWAVEOUTCAPSA, UINT);
NAKED_STDCALL(waveOutGetDevCapsW, MMRESULT, MMSYSERR_ERROR, 3, UINT_PTR, LPWAVEOUTCAPSW, UINT);
NAKED_STDCALL(waveOutGetVolume, MMRESULT, MMSYSERR_ERROR, 2, HWAVEOUT, LPDWORD);
NAKED_STDCALL(waveOutSetVolume, MMRESULT, MMSYSERR_ERROR, 2, HWAVEOUT, DWORD);
NAKED_STDCALL(waveOutGetErrorTextA, MMRESULT, MMSYSERR_ERROR, 3, MMRESULT, LPSTR, UINT);
NAKED_STDCALL(waveOutGetErrorTextW, MMRESULT, MMSYSERR_ERROR, 3, MMRESULT, LPWSTR, UINT);
NAKED_STDCALL(waveOutOpen, MMRESULT, MMSYSERR_ERROR, 6, LPHWAVEOUT, UINT, LPCWAVEFORMATEX, DWORD_PTR, DWORD_PTR, DWORD);
NAKED_STDCALL(waveOutClose, MMRESULT, MMSYSERR_ERROR, 1, HWAVEOUT);
NAKED_STDCALL(waveOutPrepareHeader, MMRESULT, MMSYSERR_ERROR, 3, HWAVEOUT, LPWAVEHDR, UINT);
NAKED_STDCALL(waveOutUnprepareHeader, MMRESULT, MMSYSERR_ERROR, 3, HWAVEOUT, LPWAVEHDR, UINT);
NAKED_STDCALL(waveOutWrite, MMRESULT, MMSYSERR_ERROR, 3, HWAVEOUT, LPWAVEHDR, UINT);
NAKED_STDCALL(waveOutPause, MMRESULT, MMSYSERR_ERROR, 1, HWAVEOUT);
NAKED_STDCALL(waveOutRestart, MMRESULT, MMSYSERR_ERROR, 1, HWAVEOUT);
NAKED_STDCALL(waveOutReset, MMRESULT, MMSYSERR_ERROR, 1, HWAVEOUT);
NAKED_STDCALL(waveOutBreakLoop, MMRESULT, MMSYSERR_ERROR, 1, HWAVEOUT);
NAKED_STDCALL(waveOutGetPosition, MMRESULT, MMSYSERR_ERROR, 3, HWAVEOUT, LPMMTIME, UINT);
NAKED_STDCALL(waveOutGetPitch, MMRESULT, MMSYSERR_ERROR, 2, HWAVEOUT, LPDWORD);
NAKED_STDCALL(waveOutSetPitch, MMRESULT, MMSYSERR_ERROR, 2, HWAVEOUT, DWORD);
NAKED_STDCALL(waveOutGetPlaybackRate, MMRESULT, MMSYSERR_ERROR, 2, HWAVEOUT, LPDWORD);
NAKED_STDCALL(waveOutSetPlaybackRate, MMRESULT, MMSYSERR_ERROR, 2, HWAVEOUT, DWORD);
NAKED_STDCALL(waveOutGetID, MMRESULT, MMSYSERR_ERROR, 2, HWAVEOUT, LPUINT);
NAKED_STDCALL(waveOutMessage, MMRESULT, MMSYSERR_ERROR, 4, HWAVEOUT, UINT, DWORD_PTR, DWORD_PTR);
NAKED_STDCALL(waveInGetNumDevs, UINT, 0, 0, void);
NAKED_STDCALL(waveInGetDevCapsA, MMRESULT, MMSYSERR_ERROR, 3, UINT_PTR, LPWAVEINCAPSA, UINT);
NAKED_STDCALL(waveInGetDevCapsW, MMRESULT, MMSYSERR_ERROR, 3, UINT_PTR, LPWAVEINCAPSW, UINT);
NAKED_STDCALL(waveInGetErrorTextA, MMRESULT, MMSYSERR_ERROR, 3, MMRESULT, LPSTR, UINT);
NAKED_STDCALL(waveInGetErrorTextW, MMRESULT, MMSYSERR_ERROR, 3, MMRESULT, LPWSTR, UINT);
NAKED_STDCALL(waveInOpen, MMRESULT, MMSYSERR_ERROR, 6, LPHWAVEIN, UINT, LPCWAVEFORMATEX, DWORD_PTR, DWORD_PTR, DWORD);
NAKED_STDCALL(waveInClose, MMRESULT, MMSYSERR_ERROR, 1, HWAVEIN);
NAKED_STDCALL(waveInPrepareHeader, MMRESULT, MMSYSERR_ERROR, 3, HWAVEIN, LPWAVEHDR, UINT);
NAKED_STDCALL(waveInUnprepareHeader, MMRESULT, MMSYSERR_ERROR, 3, HWAVEIN, LPWAVEHDR, UINT);
NAKED_STDCALL(waveInAddBuffer, MMRESULT, MMSYSERR_ERROR, 3, HWAVEIN, LPWAVEHDR, UINT);
NAKED_STDCALL(waveInStart, MMRESULT, MMSYSERR_ERROR, 1, HWAVEIN);
NAKED_STDCALL(waveInStop, MMRESULT, MMSYSERR_ERROR, 1, HWAVEIN);
NAKED_STDCALL(waveInReset, MMRESULT, MMSYSERR_ERROR, 1, HWAVEIN);
NAKED_STDCALL(waveInGetPosition, MMRESULT, MMSYSERR_ERROR, 3, HWAVEIN, LPMMTIME, UINT);
NAKED_STDCALL(waveInGetID, MMRESULT, MMSYSERR_ERROR, 2, HWAVEIN, LPUINT);
NAKED_STDCALL(waveInMessage, MMRESULT, MMSYSERR_ERROR, 4, HWAVEIN, UINT, DWORD_PTR, DWORD_PTR);

// Message Functions
NAKED_STDCALL(aux32Message, DWORD, 0, 5, UINT, UINT, DWORD, DWORD, DWORD);
NAKED_STDCALL(joy32Message, DWORD, 0, 5, UINT, UINT, DWORD, DWORD, DWORD);
NAKED_STDCALL(mci32Message, DWORD, 0, 5, DWORD, DWORD, DWORD, DWORD, DWORD);
NAKED_STDCALL(mid32Message, DWORD, 0, 5, UINT, UINT, DWORD, DWORD, DWORD);
NAKED_STDCALL(mod32Message, DWORD, 0, 5, UINT, UINT, DWORD, DWORD, DWORD);
NAKED_STDCALL(mxd32Message, DWORD, 0, 5, UINT, UINT, DWORD, DWORD, DWORD);
NAKED_STDCALL(tid32Message, DWORD, 0, 5, UINT, UINT, DWORD, DWORD, DWORD);
NAKED_STDCALL(wid32Message, DWORD, 0, 5, UINT, UINT, DWORD, DWORD, DWORD);
NAKED_STDCALL(wod32Message, DWORD, 0, 5, UINT, UINT, DWORD, DWORD, DWORD);

BOOL WINAPI NsGetAddress() {
    GETADDRESS(NT4PlaySound);
    GETADDRESS(PlaySound);
    GETADDRESS(sndPlaySoundA);
    GETADDRESS(sndPlaySoundW);
    GETADDRESS(PlaySoundA);
    GETADDRESS(PlaySoundW);

    // Driver and Drv help Functions
    GETADDRESS(CloseDriver);
    GETADDRESS(DefDriverProc);
    GETADDRESS(DriverCallback);
    GETADDRESS(DrvClose);
    GETADDRESS(DrvGetModuleHandle);
    GETADDRESS(DrvOpen);
    GETADDRESS(DrvSendMessage);
    GETADDRESS(GetDriverModuleHandle);
    GETADDRESS(MigrateSoundEvents);
    GETADDRESS(MigrateAllDrivers);
    GETADDRESS(mmsystemGetVersion);
    GETADDRESS(NotifyCallbackData);
    GETADDRESS(OpenDriver);
    GETADDRESS(SendDriverMessage);
    GETADDRESS(WOW32DriverCallback);
    GETADDRESS(WOW32ResolveMultiMediaHandle);
    GETADDRESS(WOWAppExit);
    GETADDRESS(winmmDbgOut);
    GETADDRESS(WinmmLogon);
    GETADDRESS(WinmmLogoff);
    GETADDRESS(winmmSetDebugLevel);

    // Audio GFX support Functions
    GETADDRESS(gfxCreateZoneFactoriesList);
    GETADDRESS(gfxCreateGfxFactoriesList);
    GETADDRESS(gfxDestroyDeviceInterfaceList);
    GETADDRESS(gfxEnumerateGfxs);
    GETADDRESS(gfxRemoveGfx);
    GETADDRESS(gfxAddGfx);
    GETADDRESS(gfxModifyGfx);
    GETADDRESS(gfxOpenGfx);
    GETADDRESS(gfxBatchChange);

    // AUX Functions
    GETADDRESS(auxGetDevCapsA);
    GETADDRESS(auxGetDevCapsW);
    GETADDRESS(auxGetNumDevs);
    GETADDRESS(auxGetVolume);
    GETADDRESS(auxOutMessage);
    GETADDRESS(auxSetVolume);

    // Joystick Functions
    GETADDRESS(joyConfigChanged);
    GETADDRESS(joySetCalibration);
    GETADDRESS(joyGetDevCapsA);
    GETADDRESS(joyGetDevCapsW);
    GETADDRESS(joyGetNumDevs);
    GETADDRESS(joyGetPos);
    GETADDRESS(joyGetPosEx);
    GETADDRESS(joyGetThreshold);
    GETADDRESS(joyReleaseCapture);
    GETADDRESS(joySetCapture);
    GETADDRESS(joySetThreshold);

    // MCI Functions
    GETADDRESS(mciExecute);
    GETADDRESS(mciDriverNotify);
    GETADDRESS(mciDriverYield);
    GETADDRESS(mciFreeCommandResource);
    GETADDRESS(mciGetCreatorTask);
    GETADDRESS(mciGetDeviceIDA);
    GETADDRESS(mciGetDeviceIDFromElementIDA);
    GETADDRESS(mciGetDeviceIDFromElementIDW);
    GETADDRESS(mciGetDeviceIDW);
    GETADDRESS(mciGetDriverData);
    GETADDRESS(mciGetErrorStringA);
    GETADDRESS(mciGetErrorStringW);
    GETADDRESS(mciGetYieldProc);
    GETADDRESS(mciLoadCommandResource);
    GETADDRESS(mciSendCommandA);
    GETADDRESS(mciSendCommandW);
    GETADDRESS(mciSendStringA);
    GETADDRESS(mciSendStringW);
    GETADDRESS(mciSetDriverData);
    GETADDRESS(mciSetYieldProc);
    GETADDRESS(mciEatCommandEntry);
    GETADDRESS(mciGetParamSize);
    GETADDRESS(mciUnlockCommandTable);
    GETADDRESS(FindCommandItem);

    // MIDI Functions
    GETADDRESS(midiConnect);
    GETADDRESS(midiDisconnect);
    GETADDRESS(midiInAddBuffer);
    GETADDRESS(midiInClose);
    GETADDRESS(midiInGetDevCapsA);
    GETADDRESS(midiInGetDevCapsW);
    GETADDRESS(midiInGetErrorTextA);
    GETADDRESS(midiInGetErrorTextW);
    GETADDRESS(midiInGetID);
    GETADDRESS(midiInGetNumDevs);
    GETADDRESS(midiInMessage);
    GETADDRESS(midiInOpen);
    GETADDRESS(midiInPrepareHeader);
    GETADDRESS(midiInReset);
    GETADDRESS(midiInStart);
    GETADDRESS(midiInStop);
    GETADDRESS(midiInUnprepareHeader);
    GETADDRESS(midiOutCacheDrumPatches);
    GETADDRESS(midiOutCachePatches);
    GETADDRESS(midiOutClose);
    GETADDRESS(midiOutGetDevCapsA);
    GETADDRESS(midiOutGetDevCapsW);
    GETADDRESS(midiOutGetErrorTextA);
    GETADDRESS(midiOutGetErrorTextW);
    GETADDRESS(midiOutGetID);
    GETADDRESS(midiOutGetNumDevs);
    GETADDRESS(midiOutGetVolume);
    GETADDRESS(midiOutLongMsg);
    GETADDRESS(midiOutMessage);
    GETADDRESS(midiOutOpen);
    GETADDRESS(midiOutPrepareHeader);
    GETADDRESS(midiOutReset);
    GETADDRESS(midiOutSetVolume);
    GETADDRESS(midiOutShortMsg);
    GETADDRESS(midiOutUnprepareHeader);
    GETADDRESS(midiStreamClose);
    GETADDRESS(midiStreamOpen);
    GETADDRESS(midiStreamOut);
    GETADDRESS(midiStreamPause);
    GETADDRESS(midiStreamPosition);
    GETADDRESS(midiStreamProperty);
    GETADDRESS(midiStreamRestart);
    GETADDRESS(midiStreamStop);

    // Mixer Functions
    GETADDRESS(mixerClose);
    GETADDRESS(mixerGetControlDetailsA);
    GETADDRESS(mixerGetControlDetailsW);
    GETADDRESS(mixerGetDevCapsA);
    GETADDRESS(mixerGetDevCapsW);
    GETADDRESS(mixerGetID);
    GETADDRESS(mixerGetLineControlsA);
    GETADDRESS(mixerGetLineControlsW);
    GETADDRESS(mixerGetLineInfoA);
    GETADDRESS(mixerGetLineInfoW);
    GETADDRESS(mixerGetNumDevs);
    GETADDRESS(mixerMessage);
    GETADDRESS(mixerOpen);
    GETADDRESS(mixerSetControlDetails);

    // Task Functions
    GETADDRESS(mmDrvInstall);
    GETADDRESS(mmGetCurrentTask);
    GETADDRESS(mmTaskBlock);
    GETADDRESS(mmTaskCreate);
    GETADDRESS(mmTaskSignal);
    GETADDRESS(mmTaskYield);

    // Multimedia io Functions
    GETADDRESS(mmioAdvance);
    GETADDRESS(mmioAscend);
    GETADDRESS(mmioClose);
    GETADDRESS(mmioCreateChunk);
    GETADDRESS(mmioDescend);
    GETADDRESS(mmioFlush);
    GETADDRESS(mmioGetInfo);
    GETADDRESS(mmioInstallIOProcA);
    GETADDRESS(mmioInstallIOProcW);
    GETADDRESS(mmioOpenA);
    GETADDRESS(mmioOpenW);
    GETADDRESS(mmioRead);
    GETADDRESS(mmioRenameA);
    GETADDRESS(mmioRenameW);
    GETADDRESS(mmioSeek);
    GETADDRESS(mmioSendMessage);
    GETADDRESS(mmioSetBuffer);
    GETADDRESS(mmioSetInfo);
    GETADDRESS(mmioStringToFOURCCA);
    GETADDRESS(mmioStringToFOURCCW);
    GETADDRESS(mmioWrite);

    // Time Functions
    GETADDRESS(timeBeginPeriod);
    GETADDRESS(timeEndPeriod);
    GETADDRESS(timeGetDevCaps);
    GETADDRESS(timeGetSystemTime);
    GETADDRESS(timeGetTime);
    GETADDRESS(timeKillEvent);
    GETADDRESS(timeSetEvent);

    // Wave Functions
    GETADDRESS(waveInAddBuffer);
    GETADDRESS(waveInClose);
    GETADDRESS(waveInGetDevCapsA);
    GETADDRESS(waveInGetDevCapsW);
    GETADDRESS(waveInGetErrorTextA);
    GETADDRESS(waveInGetErrorTextW);
    GETADDRESS(waveInGetID);
    GETADDRESS(waveInGetNumDevs);
    GETADDRESS(waveInGetPosition);
    GETADDRESS(waveInMessage);
    GETADDRESS(waveInOpen);
    GETADDRESS(waveInPrepareHeader);
    GETADDRESS(waveInReset);
    GETADDRESS(waveInStart);
    GETADDRESS(waveInStop);
    GETADDRESS(waveInUnprepareHeader);
    GETADDRESS(waveOutBreakLoop);
    GETADDRESS(waveOutClose);
    GETADDRESS(waveOutGetDevCapsA);
    GETADDRESS(waveOutGetDevCapsW);
    GETADDRESS(waveOutGetErrorTextA);
    GETADDRESS(waveOutGetErrorTextW);
    GETADDRESS(waveOutGetID);
    GETADDRESS(waveOutGetNumDevs);
    GETADDRESS(waveOutGetPitch);
    GETADDRESS(waveOutGetPlaybackRate);
    GETADDRESS(waveOutGetPosition);
    GETADDRESS(waveOutGetVolume);
    GETADDRESS(waveOutMessage);
    GETADDRESS(waveOutOpen);
    GETADDRESS(waveOutPause);
    GETADDRESS(waveOutPrepareHeader);
    GETADDRESS(waveOutReset);
    GETADDRESS(waveOutRestart);
    GETADDRESS(waveOutSetPitch);
    GETADDRESS(waveOutSetPlaybackRate);
    GETADDRESS(waveOutSetVolume);
    GETADDRESS(waveOutUnprepareHeader);
    GETADDRESS(waveOutWrite);

    // Message Functions
    GETADDRESS(aux32Message);
    GETADDRESS(mid32Message);
    GETADDRESS(joy32Message);
    GETADDRESS(mci32Message);
    GETADDRESS(mod32Message);
    GETADDRESS(mxd32Message);
    GETADDRESS(tid32Message);
    GETADDRESS(wid32Message);
    GETADDRESS(wod32Message);

    UPDATEPOINTER(PlaySound, PlaySoundA);
    if (!pfn_NT4PlaySound) pfn_NT4PlaySound = pfn_PlaySound;
    else if (!pfn_PlaySoundA) pfn_PlaySound = pfn_PlaySoundA = pfn_NT4PlaySound;
    UPDATEPOINTER(CloseDriver, DrvClose);
    UPDATEPOINTER(OpenDriver, DrvOpen);
    UPDATEPOINTER(SendDriverMessage, DrvSendMessage);
    UPDATEPOINTER(GetDriverModuleHandle, DrvGetModuleHandle);
    return TRUE;
}
#undef UPDATEPOINTER
#undef GETADDRESS
#undef NAKED_STDCALL
#undef NAKED_FASTCALL
#ifdef UNICODE
#define PlaySound  PlaySoundW
#else
#define PlaySound  PlaySoundA
#endif
#pragma pack(pop)